
	// user := model.BaseUser{
	// 	// UserId:     11,
	// 	OpenId:     random.RandomUpperString(16),
	// 	UserName:   "刘头",
	// 	Tel:        "18278262188",
	// 	Email:      "liutou@outlook.com",
	// 	Permission: 3,
	// 	LastTime:   time.Now().Format("2006-01-02 15:04:05"),
	// 	Sex:        "男",
	// 	Status:     "开启",
	// }
	// if err := model.DB.Create(&user); err.Error != nil {
	// 	// 错误处理
	// 	fmt.Println("无法插入数据")
	// }

	// 查询
	// var users []model.BaseUser
	// if err := model.DB.Where(&model.BaseUser{UserName: "李翠花"}).Find(&users); err.Error != nil {
	// 	// 错误处理
	// 	fmt.Println("没有找到该数据333")
	// }

	// 删除
	// model.DB.Where(&model.BaseUser{UserName: "翠花"}).Delete(&model.BaseUser{})
	// 修改
	// model.DB.Model(&model.BaseUser{}).Where(&model.BaseUser{UserName: "李翠花"}).Updates(model.BaseUser{Sex: "其他"})

	// 通过查询的用户插入高血压数据
	// for _, user := range users {
	// 	fmt.Println(user)

	// 	// bpRecord := model.PatientBpRecord{
	// 	// 	UserId:       user.UserId,
	// 	// 	RecordDate:   time.Now().Format("2006-01-02"),
	// 	// 	RecordTime:   time.Now().Format("15:04:05"),
	// 	// 	LowPressure:  int16(tools.RandomInt(60, 90)),
	// 	// 	HighPressure: int16(tools.RandomInt(90, 150)),
	// 	// }
	// 	// if err := model.DB.Create(&bpRecord); err.Error != nil {
	// 	// 	// 错误处理
	// 	// 	fmt.Println("无法插入数据")
	// 	// }
	// }



// 用户根据用户密码注册
func (uh *BaseUserHandler) Register() gin.HandlerFunc {
	return func(c *gin.Context) {
		// 定义基本结构
		type RegisterParam struct {
			Username string `json:"username" binding:"required"`
			Password string `json:"password" binding:"required"`
		}

		// 检验基本结构
		var param RegisterParam
		if err := c.ShouldBind(&param); err != nil {
			response.JSON(c, errors.Wrap(err, code.ValidateErr, "存在必要信息未填写"), nil)
			return
		}

		// 查询用户是否存在
		_, err := uh.userSrv.GetByName(context.TODO(), param.Username)
		if err == nil {
			response.JSON(c, errors.Wrap(e.New("account repeated existence"), code.UserRegisterErr, "注册失败，用户已存在"), nil)
			return
		}

		// 对密码进行MD5加密
		securityPassword := security.Md5(param.Password)
		err = uh.userSrv.AddByNameAndPassword(context.TODO(), param.Username, securityPassword)
		if err != nil {
			response.JSON(c, errors.Wrap(err, code.UserRegisterErr, "注册失败，无法注册"), nil)
		}

		// 返回这个结果
		response.JSON(c, nil, struct {
			Result string `json:"result"`
		}{
			Result: "register successful",
		})
	}
}